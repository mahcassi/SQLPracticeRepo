/*FUNÇOES DE AGREGACAO*/

/*Query simples*/

select * from funcionarios;
select * from departamentos;
/* Contando o numero de ocorrencias */

select count(*) from funcionarios;
select count(*) from departamentos;
select count(*) from localizacao;

/* Agrupando por sexo com group by */

select count(*) from funcionarios
group by sexo;

/* colocando o nome da coluna */

select sexo, count(*) as "Quantidade" from funcionarios
group by sexo;


/* mostrando o numero de funcionarios em cada departamento */

select departamento, count(*)
from funcionarios
group by departamento;


/* Exibindo o maximo de salarios - 149929 */

select max(salario) as "SALARIO MAXIMO" from funcionarios;

/* Exibindo o minimo de salarios - 40138 */

select min(salario) as "SALARIO MENOR" from funcionarios;

/* Exibindo o máximo e o mínimo juntos */

select min(salario) as "SALARIO MINIMO", max(salario) as "SALARIO MAXIMO"
from funcionarios;

/* Exibindo o máximo e o mínimo de cada departamento */

select departamento, min(salario), max(salario)
from funcionarios
group by departamento;

/* Exibindo o máximo e o mínimo por sexo */

select sexo, min(salario), max(salario)
from funcionarios
group by sexo;


/* Estatisticas */

/* Mostrando quantidade limitada de linhas */
SELECT * FROM FUNCIONARIOS 
LIMIT 10;

/* Qual gasto total de salario pago pela empresa?*/
SELECT SUM(SALARIO) FROM FUNCIONARIOS;

/* Qual o montante total que cada departamento recebe? */
SELECT DEPARTAMENTO, SUM(SALARIO)
FROM FUNCIONARIOS
GROUP BY DEPARTAMENTO;


/* POR DEPARTAMENTO, QUAL O TOTAL E A MEDIA PAGA PARA FUNCIONARIOS? */
SELECT SUM(SALARIO), AVG(SALARIO) FROM FUNCIONARIOS;

SELECT DEPARTAMENTO, SUM(SALARIO), AVG(SALARIO) FROM FUNCIONARIOS 
GROUP BY DEPARTAMENTO;

/* ORDENANDO */
SELECT DEPARTAMENTO, SUM(SALARIO), AVG(SALARIO) FROM FUNCIONARIOS 
GROUP BY DEPARTAMENTO
ORDER BY 3;

SELECT DEPARTAMENTO, SUM(SALARIO), AVG(SALARIO) FROM FUNCIONARIOS 
GROUP BY DEPARTAMENTO
ORDER BY 3 ASC;

SELECT DEPARTAMENTO, SUM(SALARIO), AVG(SALARIO) FROM FUNCIONARIOS 
GROUP BY DEPARTAMENTO
ORDER BY 3 DESC;

/* create table as select */

/*Podemos criar uma tabela com o resultado de uma querie
e essa é a forma de realizar uma modelagem colunar 
CREATE TABLE AS SELECT
*/


CREATE TABLE GENERO(
	IDGENERO INT PRIMARY KEY,
	NOME VARCHAR(30)
);

INSERT INTO GENERO VALUES(1,'FANTASIA');
INSERT INTO GENERO VALUES(2,'AVENTURA');
INSERT INTO GENERO VALUES(3,'SUSPENSE');
INSERT INTO GENERO VALUES(4,'AÇÃO');
INSERT INTO GENERO VALUES(5,'DRAMA');

CREATE TABLE FILME(
	IDFILME INT PRIMARY KEY,
	NOME VARCHAR(50),
	ANO INT,
    ID_GENERO INT,
	FOREIGN KEY(ID_GENERO)
	REFERENCES GENERO(IDGENERO)
);

INSERT INTO FILME VALUES(100,'KILL BILL I',2007,2);
INSERT INTO FILME VALUES(200,'DRACULA',1998,3);
INSERT INTO FILME VALUES(300,'SENHOR DOS ANEIS',2008,1);
INSERT INTO FILME VALUES(400,'UM SONHO DE LIBERDADE',2008,5);
INSERT INTO FILME VALUES(500,'OS BAD BOYS',2008,4);
INSERT INTO FILME VALUES(600,'GUERRA CIVIL',2016,2);
INSERT INTO FILME VALUES(700,'CADILLAC RECORDS',2009,5);
INSERT INTO FILME VALUES(800,'O HOBBIT',2008,1);
INSERT INTO FILME VALUES(900,'TOMATES VERDES FRITOS',2008,5);
INSERT INTO FILME VALUES(1000,'CORRIDA MORTAL',2008,4);

CREATE TABLE LOCACAO(
	IDLOCACAO INT PRIMARY KEY,
	DATA DATE,
	MIDIA INT,
	DIAS INT,
	ID_FILME INT,
	FOREIGN KEY(ID_FILME)
	REFERENCES FILME(IDFILME)

);

select * from locacao

INSERT INTO LOCACAO VALUES(1,'01/08/2019',23,3,100);
INSERT INTO LOCACAO VALUES(2,'01/02/2019',56,1,400);
INSERT INTO LOCACAO VALUES(3,'02/07/2019',23,3,400);
INSERT INTO LOCACAO VALUES(4,'02/02/2019',43,1,500);
INSERT INTO LOCACAO VALUES(5,'02/02/2019',23,2,100);
INSERT INTO LOCACAO VALUES(6,'03/07/2019',76,3,700);
INSERT INTO LOCACAO VALUES(7,'03/02/2019',45,1,700);
INSERT INTO LOCACAO VALUES(8,'04/08/2019',89,3,100);
INSERT INTO LOCACAO VALUES(9,'04/02/2019',23,3,800);
INSERT INTO LOCACAO VALUES(10,'05/07/2019',23,3,500);
INSERT INTO LOCACAO VALUES(11,'05/02/2019',38,3,800);
INSERT INTO LOCACAO VALUES(12,'01/10/2019',56,1,100);
INSERT INTO LOCACAO VALUES(13,'06/12/2019',23,3,400);
INSERT INTO LOCACAO VALUES(14,'01/02/2019',56,2,300);
INSERT INTO LOCACAO VALUES(15,'04/10/2019',76,3,300);
INSERT INTO LOCACAO VALUES(16,'01/09/2019',32,2,400);
INSERT INTO LOCACAO VALUES(17,'08/02/2019',89,3,100);
INSERT INTO LOCACAO VALUES(18,'01/02/2019',23,1,200);
INSERT INTO LOCACAO VALUES(19,'08/09/2019',45,3,300);
INSERT INTO LOCACAO VALUES(20,'01/12/2019',89,1,400);
INSERT INTO LOCACAO VALUES(21,'09/07/2019',23,3,1000);
INSERT INTO LOCACAO VALUES(22,'01/12/2019',21,3,1000);
INSERT INTO LOCACAO VALUES(23,'01/02/2019',34,2,100);
INSERT INTO LOCACAO VALUES(24,'09/08/2019',67,1,1000);
INSERT INTO LOCACAO VALUES(25,'01/02/2019',76,3,1000);
INSERT INTO LOCACAO VALUES(26,'01/02/2019',66,3,200);
INSERT INTO LOCACAO VALUES(27,'09/12/2019',90,1,400);
INSERT INTO LOCACAO VALUES(28,'03/02/2019',23,3,100);
INSERT INTO LOCACAO VALUES(29,'01/12/2019',65,5,1000);
INSERT INTO LOCACAO VALUES(30,'03/08/2019',43,1,1000);
INSERT INTO LOCACAO VALUES(31,'01/02/2019',27,31,200);

SELECT F.NOME, G.NOME, L.DATA, L.DIAS, L.MIDIA
FROM GENERO G
INNER JOIN FILME F
ON G.IDGENERO = F.ID_GENERO
INNER JOIN LOCACAO L
ON L.ID_FILME = F.IDFILME;

/* criando uma tabela com resultado de uma query (forma de realizar modelagem colunar)*/
CREATE TABLE REL_LOCADORA AS 
SELECT F.NOME AS FILME, G.NOME AS GENERO, L.DATA AS DATA, L.DIAS AS DIAS, L.MIDIA AS MIDIA
FROM GENERO G
INNER JOIN FILME F
ON G.IDGENERO = F.ID_GENERO
INNER JOIN LOCACAO L
ON L.ID_FILME = F.IDFILME;

SELECT * FROM REL_LOCADORA;


COPY REL_LOCADORA TO
'C:\teste\Scripts DS\REL_LOCADORA.csv'
DELIMITER ';'
CSV HEADER;

/* DROPANDO A TABELA DE LOCACAO PARA USAR O SEQUENCE COMO ID */
DROP TABLE LOCACAO;


/* CRIANDO A TABELA NOVAMENTE */
CREATE TABLE LOCACAO(
	IDLOCACAO INT PRIMARY KEY,
	DATA TIMESTAMP,
	MIDIA INT,
	DIAS INT,
	ID_FILME INT,
	FOREIGN KEY(ID_FILME)
	REFERENCES FILME(IDFILME)
);

/* CRIANDO SEQUENCE PARA DAR VALORES A TABELA DE LOCACAO */
CREATE SEQUENCE SEQ_LOCACAO;

/* COMANDO PARA PEGAR O VALOR DA SEQUENCE */
NEXTVAL('SEQ_LOCACAO');

INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'01/08/2018',23,3,100);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'01/02/2018',56,1,400);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'02/07/2018',23,3,400);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'02/02/2018',43,1,500);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'02/02/2018',23,2,100);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'03/07/2018',76,3,700);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'03/02/2018',45,1,700);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'04/08/2018',89,3,100);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'04/02/2018',23,3,800);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'05/07/2018',23,3,500);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'05/02/2018',38,3,800);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'01/10/2018',56,1,100);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'06/12/2018',23,3,400);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'01/02/2018',56,2,300);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'04/10/2018',76,3,300);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'01/09/2018',32,2,400);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'08/02/2018',89,3,100);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'01/02/2018',23,1,200);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'08/09/2018',45,3,300);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'01/12/2018',89,1,400);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'09/07/2018',23,3,1000);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'01/12/2018',21,3,1000);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'01/02/2018',34,2,100);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'09/08/2018',67,1,1000);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'01/02/2018',76,3,1000);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'01/02/2018',66,3,200);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'09/12/2018',90,1,400);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'03/02/2018',23,3,100);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'01/12/2018',65,5,1000);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'03/08/2018',43,1,1000);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'01/02/2018',27,31,200);


SELECT * FROM LOCACAO;


DROP TABLE REL_LOCADORA;

SELECT L.IDLOCACAO, F.NOME AS FILME, G.NOME AS GENERO, L.DATA AS DATA, L.DIAS AS DIAS, L.MIDIA AS MIDIA
FROM GENERO G
INNER JOIN FILME F
ON G.IDGENERO = F.ID_GENERO
INNER JOIN LOCACAO L
ON L.ID_FILME = F.IDFILME;

/* CRIANDO NOVA TABELA REATORIO COM O ID DA LOCACAO */
CREATE TABLE RELATORIO_LOCADORA AS
SELECT L.IDLOCACAO, F.NOME AS FILME, G.NOME AS GENERO, L.DATA AS DATA, L.DIAS AS DIAS, L.MIDIA AS MIDIA
FROM GENERO G
INNER JOIN FILME F
ON G.IDGENERO = F.ID_GENERO
INNER JOIN LOCACAO L
ON L.ID_FILME = F.IDFILME;

SELECT * FROM RELATORIO_LOCADORA

/* Verificando ids maximos de cada tabela  */
SELECT MAX(IDLOCACAO) AS RELATORIO, (SELECT MAX(IDLOCACAO) FROM LOCACAO) AS LOCACAO
FROM RELATORIO_LOCADORA;

/* EXIBINDO REGISTROS Q ESTAO EM LOCACAO MAS NAO ESTAO EM RELATORIO*/
SELECT L.IDLOCACAO, F.NOME AS FILME, G.NOME AS GENERO, L.DATA AS DATA, L.DIAS AS DIAS, L.MIDIA AS MIDIA
FROM GENERO G
INNER JOIN FILME F
ON G.IDGENERO = F.ID_GENERO
INNER JOIN LOCACAO L
ON L.ID_FILME = F.IDFILME
WHERE IDLOCACAO NOT IN(SELECT IDLOCACAO FROM RELATORIO_LOCADORA);

/* INSERINDO REGISTROS NOVOS */
INSERT INTO RELATORIO_LOCADORA
SELECT L.IDLOCACAO, F.NOME AS FILME, G.NOME AS GENERO, L.DATA AS DATA, L.DIAS AS DIAS, L.MIDIA AS MIDIA
FROM GENERO G
INNER JOIN FILME F
ON G.IDGENERO = F.ID_GENERO
INNER JOIN LOCACAO L
ON L.ID_FILME = F.IDFILME
WHERE IDLOCACAO NOT IN(SELECT IDLOCACAO FROM RELATORIO_LOCADORA);

SELECT * FROM RELATORIO_LOCADORA;

/* VAMOS DEIXAR ESSE PROCEDIMENTO AUTOMATICO POR MEIO DE UMA TRIGGER */

/* Criando a função */
CREATE OR REPLACE FUNCTION ATUALIZA_REL()
RETURNS TRIGGER AS $$
BEGIN
	/* INSERINDO DADOS NOVOS NO RELATORIO */
	INSERT INTO RELATORIO_LOCADORA
	SELECT L.IDLOCACAO, F.NOME AS FILME, G.NOME AS GENERO, L.DATA AS DATA, L.DIAS AS DIAS, L.MIDIA AS MIDIA
	FROM GENERO G
	INNER JOIN FILME F
	ON G.IDGENERO = F.ID_GENERO
	INNER JOIN LOCACAO L
	ON L.ID_FILME = F.IDFILME
	WHERE IDLOCACAO NOT IN(SELECT IDLOCACAO FROM RELATORIO_LOCADORA);
	
	/* GERANDO RELATORIO */
	COPY RELATORIO_LOCADORA TO
	'C:\teste\Scripts DS\RELATORIO_LOCADORA.csv'
	DELIMITER ';'
	CSV HEADER;

RETURN NEW;
END;
$$
LANGUAGE PLPGSQL;

/* comando para apagar trigger */
DROP TRIGGER TG_RELATORIO ON LOCACAO;

/* CRIANDO TRIGGER*/
CREATE TRIGGER TG_RELATORIO
AFTER INSERT ON LOCACAO
FOR EACH ROW
	EXECUTE PROCEDURE ATUALIZA_REL();

/* INSERINDO REGISTRO PARA VALIDAR SE A TRIGGER FUNCIONA */
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),NOW(),100,7,300);

SELECT * FROM LOCACAO;
SELECT * FROM RELATORIO_LOCADORA;


/* SINCRONIZANDO COM REGISTROS DELETADOS */
CREATE OR REPLACE FUNCTION DELETE_LOCACAO()
RETURNS TRIGGER AS $$
BEGIN
	DELETE FROM RELATORIO_LOCADORA 
	WHERE IDLOCACAO = OLD.IDLOCACAO;
	
	/* GERANDO RELATORIO */
	COPY RELATORIO_LOCADORA TO
	'C:\teste\Scripts DS\RELATORIO_LOCADORA.csv'
	DELIMITER ';'
	CSV HEADER;
	
RETURN OLD;
END;
$$
LANGUAGE PLPGSQL;


/* DELETE FROM LOCACAO WHERE IDLOCACAO = 1; */
/* VAI CHECAR O DELETE DA TABELA DE LOCACAO, PEGAR O ID QUE JA ESTA NA TABELA RELATORIO_LOCACAO (POR ISSO O OLD)
E DELETAR */
/* SE FOSSE UMA INSERÇÃO SERIA NEW INVÉS DE OLD*/
CREATE TRIGGER DELETE_REG
	BEFORE DELETE ON LOCACAO
	FOR EACH ROW
	EXECUTE PROCEDURE DELETE_LOCACAO();
	
	
SELECT * FROM LOCACAO;
SELECT * FROM RELATORIO_LOCADORA;

DELETE FROM LOCACAO WHERE IDLOCACAO = 1;



/* Variaveis Dummy para Machine Learning */
/*
	Variável Dummy é aquela que toma o valor de "zero" ou "um" indicando a ausência 
	ou presença de qualidades ou atributos. Essas variáveis são usadas como dispositivos
	para classificar dados em categorias mutuamente exclusivas.
*/

/* Utilizando Case */

SELECT NOME, SEXO FROM FUNCIONARIOS;

SELECT CARGO FROM FUNCIONARIOS

SELECT NOME, CARGO,
CASE
	WHEN CARGO = 'Financial Advisor' THEN 'Condicao 01'
	WHEN CARGO = 'Structural Engineer' THEN 'Condicao 02'
	WHEN CARGO = 'Executive Secretary' THEN 'Condicao 03'
	WHEN CARGO = 'Sales Associative' THEN 'Condicao 04'
	ELSE 'OUTRAS CONDICOES'
END AS "CONDICOES"
FROM FUNCIONARIOS;

SELECT NOME,
CASE
	WHEN SEXO = 'Masculino' THEN 'M'
	ELSE 'F'
END AS "SEXO"
FROM FUNCIONARIOS;

/* utlizandos valores booleanos */
SELECT NOME, CARGO, (SEXO = 'Masculino') AS Masculino, (SEXO = 'Feminino') as Feminino
FROM FUNCIONARIOS;

/* Mesclando técnicas */
SELECT NOME, CARGO,
CASE 
	WHEN (SEXO = 'Masculino') = true THEN 1
	ELSE 0
END AS "MASCULINO",
CASE 
	WHEN (SEXO = 'Feminino') = true THEN 1
	ELSE 0
END AS "FEMININO"
FROM FUNCIONARIOS;


/* Filtros de grupo */

/* Filtros Baseados em Valores Numericos */
SELECT NOME, DEPARTAMENTO, SALARIO
FROM FUNCIONARIOS
WHERE SALARIO > 100000;

/* Filtros em Strings*/
SELECT NOME, DEPARTAMENTO, SALARIO
FROM FUNCIONARIOS
WHERE DEPARTAMENTO = 'Ferramentas';

/* FILTROS BASEADOS EM MULTIPLOS TIPOS E COLUNAS - Considerar OR E AND */
SELECT NOME, DEPARTAMENTO, SALARIO
FROM FUNCIONARIOS
WHERE DEPARTAMENTO = 'Ferramentas' AND SALARIO > 100000;


/* FILTRO BASEADO EM UNICO TIPO E COLUNA - REGRA AND E OR */
SELECT NOME, DEPARTAMENTO, SALARIO
FROM FUNCIONARIOS
WHERE DEPARTAMENTO = 'Ferramentas' OR DEPARTAMENTO = 'Books';

/* FILTRO BASEADOS EM PADRÃO DE CARACTERES */
SELECT DEPARTAMENTO, SUM(SALARIO) AS TOTAL
FROM FUNCIONARIOS
WHERE DEPARTAMENTO LIKE 'B%'
GROUP BY DEPARTAMENTO;

/* FILTROS BASEADOS EM PADRÃO DE CARACTERES COM MAIS LETRAS */
SELECT DEPARTAMENTO, SUM(SALARIO) AS TOTAL
FROM FUNCIONARIOS
WHERE DEPARTAMENTO LIKE 'Be%'
GROUP BY DEPARTAMENTO;

/* Utiliazando o caracter coringa no meio da palavra */
SELECT DEPARTAMENTO, SUM(SALARIO) AS TOTAL
FROM FUNCIONARIOS
WHERE DEPARTAMENTO LIKE 'B%s'
GROUP BY DEPARTAMENTO;

/* e se eu quisesse filtrar o agrupamento pelo salario por exemplo maior que 4.000,000*/

/* QUERY COM ERRO */
/* Não posso fazer WHERE com coluna agregada */
SELECT DEPARTAMENTO, SUM(SALARIO) AS TOTAL
FROM FUNCIONARIOS
WHERE DEPARTAMENTO LIKE 'B%s'
AND SUM(SALARIO) > 4000000
GROUP BY DEPARTAMENTO;

/* Para fazer o where com coluna agregada usamos o HAVING*/
SELECT DEPARTAMENTO, SUM(SALARIO) AS TOTAL
FROM FUNCIONARIOS
WHERE DEPARTAMENTO LIKE 'B%'
GROUP BY DEPARTAMENTO
HAVING SUM(SALARIO) > 4000000;


/* FILTROS DE CONTADORES */

/* MULTIPLOS CONTADORES */
SELECT SEXO, COUNT(*)
FROM FUNCIONARIOS 
WHERE SEXO = 'Masculino' 
GROUP BY SEXO;

/* COMO CONTAR A QUANTIDADE TOTAL DE FUNCIONARIOS E A QUANTIDADE DE FUNCIONARIOS DO SEXO MASCULINO*/
SELECT COUNT(*) AS "QTD TOTAL",
(SELECT COUNT(*) 
 FROM FUNCIONARIOS
 WHERE SEXO = 'Masculino'
)
FROM FUNCIONARIOS;
/* ISSO FUNCIONA MAS ELEVA O PROCESSAMENTO DO BANCO */


/* MELHOR FORMA DE FILTRAR MULTIPLOS CONTADORES */
/* FILTER só funciona com o COUNT */
SELECT COUNT(*) AS "QUANTIDADE TOTAL",
COUNT(*) FILTER(WHERE SEXO = 'Masculino') AS "MASCULINO",
COUNT(*) FILTER(WHERE DEPARTAMENTO = 'Books') AS "Books"
FROM FUNCIONARIOS;

SELECT COUNT(*) AS "QUANTIDADE TOTAL",
COUNT(*) FILTER(WHERE SEXO = 'Masculino') AS "MASCULINO",
COUNT(*) FILTER(WHERE DEPARTAMENTO = 'Books') AS "Books",
COUNT(*) FILTER(WHERE SALARIO > 140000) AS "140K"
FROM FUNCIONARIOS;


